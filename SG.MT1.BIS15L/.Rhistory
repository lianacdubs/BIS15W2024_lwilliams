library("tidyverse")
#Note: Once a package is installed using install function don't try to do it again. Put a hashtag in front of it.
fish <- readr::read_csv("data/Gaeta_etal_CLC_data.csv")
glimpse(fish)
names(fish) #shows six variables of interest
names(fish)
select(fish, contains("length"))
#look into the fish data and remove everything that has to do with length
select(fish, ends_with("id"))
#ends with
select(fish, contains("fish"))
#contains is a permutation of select command
select(fish, matches("a.+er")) #handy bit of code for the project. Look at the variables of interest.
mammals <- read_csv("data/mammal_lifehistories_v2.csv")
#The data folder inside of lab 4 has the .csv
select(mammals_new, -"order", -"family")
mass <- select(mammals_new, "genus", "species", "mass")
mammals_new = rename(mammals, genus="Genus", wean_mass="wean mass", max_life="max. life", litter_size="litter size", litters_per_year="litters/year")
#new name = old name
#copy amd paste is helpful
mass <- select(mammals_new, "genus", "species", "mass")
select(mammals_new, -"order", -"family")
#pull all the variables out that are not these two. if you wanted only these two then, use the -
library("tidyverse")
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
mammals <- read_csv("data/mammal_lifehistories_v2.csv")
mammals <- rename(mammals, genus=Genus, wean_mass="wean mass", max_life="max. life", litter_size="litter size", litters_per_year="litters/year")
library("tidyverse")
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
mammals <- read_csv("data/mammal_lifehistories_v2.csv")
mammals <- rename(mammals, genus=Genus, wean_mass="wean mass", max_life="max. life", litter_size="litter size", litters_per_year="litters/year")
filter(fish, lakeid == "AL") #pull out 383 observations
filter(fish, length >= 350) #note: 350 is a number so there are no quotes
not_AL <- filter(fish, lakeid != "AL") #! means not
filter(fish, length %in% c(167, 175))
#within the variable length all those with length 167 or 175
#multiple values in the same variable %n%
filter(fish, between(scalelength, 2.5, 2.55))
filter(fish, near(radii_length_mm, 2, tol = 0.2))
#look for radii length near two but within 0.2 of eachother
#tol = tolerance
filter(fish, lakeid)
filter(fish, lakeid=="BO")
filter(fish, lakeid != "AR")
filter(fish, near(scalelength, 8, tol=0.25))
filter(fish, between(scalelength, 2, 4))
filter(fish, scalelength %n% c(2,4))
filter(fish, scalelength %in% c(2,4))
filter(fish, scalelength %in% c(2,4))
glimpse(mammals)
names(mammals)
Bovidae <- filter(mammals, mass>450000)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
knitr::opts_chunk$set(echo = FALSE)
library("jpeg")
library(tidyverse)
library("tidyverse")
library("janitor") #cleans up the data (like names of variables for mammals)
fish <- read_csv("data/Gaeta_etal_CLC_data.csv")
mammals <- read_csv("data/mammal_lifehistories_v2.csv")
mammals <- rename(mammals, genus="Genus", wean_mass="wean mass", max_life= "max. life", litter_size="litter size", litters_per_year="litters/year")
mammals <-  clean_names(mammals)
glimpse(fish)
filter(fish, lakeid == "AL" & length > 350) #Notice the and symbol (exclusive)
filter(fish, lakeid == "AL" | length > 350) #The vertical line stands for or
#this will have multiple lake ids (inclusive)
bovidae <- filter(mammals, mass>450000)
fish <- readr::read_csv("data/Gaeta_etal_CLC_data.csv")
mammals <- readr::read_csv("data/mammal_lifehistories_v2.csv")
mammals <- clean_names(mammals)
fish %>%
select(fish_id, radii_length_mm, scalelength) %>%
filter(fish_id == 300) %>%
arrange(radii_length_mm)
library("tidyverse")
library("janitor")
superhero_info <- read_csv("data/heroes_information.csv", na = c("", "-99", "-"))
superhero_powers <- read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
superhero_info <- clean_names(superhero_info)
superhero_powers <- clean_names(superhero_powers)
tabyl(superhero_info, alignment)
height_weight_ratio <- superhero_info %>%
select(name, height, weight)
#Adds a new column for the variable height_weight_ratio
View(height_weight_ratio)
library("tidyverse")
library("janitor")
superhero_info <- read_csv("data/heroes_information.csv", na = c("", "-99", "-"))
superhero_powers <- read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
superhero_info <- clean_names(superhero_info)
superhero_powers <- clean_names(superhero_powers)
tabyl(superhero_info, alignment)
superhero_info %>%
tabyl(publisher)
#tabyl(superhero_info,publisher) another method
superhero_info %>%
select(name, alignment) %>%  #Shows the name and alignment columns
filter(alignment=="neutral") #Only gives the "neutral" alignment
superhero_info %>%
select(name, alignment, race) %>% #shows the columns for name, alignment, and race
arrange(superhero_info) #isolates the variables
#select(superhero_info, name, alignment, race)
#This is another solution for getting the variables we are interested in without involving a pipe.
superhero_info %>%
filter(race != "Human")
#filter(superhero_info, race!="Human")
#This is another way to do the problem not involving a pipe. This looks within race column and returns the entire superhero_info table and all the "races" that are NOT human.
good_guys <- superhero_info %>%
filter(alignment=="good") #dataframe for good guys
bad_guys <- superhero_info %>%
filter(alignment=="bad") #dataframe for bad guys
#good_guys <- filter(superhero_info, alignment=="good")
#good_guys
#This method doesn't involve pipes
#bad_guys <- filter(superhero_info, alignment=="bad")
#bad_guys
#This method doesn't involve pipes
good_guys %>%
tabyl(race)
#tabyl(good_guys, race)
#this method doesn't involve pipes
good_guys %>%
filter(race=="Vampire")
#filter(good_guys, race=="Vampire")
#This method doesn't use pipes
bad_guys %>%
filter(race=="Human") %>%
filter(gender =="Male") %>%
filter(height > 200)
#filter(bad_guys, height>200, race=="Human", gender=="Male")
#This code doesn't involve pipes.
good_guys %>%
filter(hair_color == "Green")
#Good guys with green hair
bad_guys %>%
filter(hair_color == "Green")
#Bad guys with green hair
#dim(filter(bad_guys, hair_color=="Green"))
#dim(filter(good_guys, hair_color=="Green"))
superhero_info %>%
filter(weight<50) %>%
arrange(weight) #sorts the weight from lowest to highest
superhero_info %>% mutate(height_weight_ratio = height/weight) %>% select(name, height, weight, height_weight_ratio) %>% arrange(desc(height_weight_ratio))
names(superhero_powers)
superhero_powers %>%
select(agility, stealth, super_strength, stamina) %>%
filter(agility==T) %>%
filter(stealth==T) %>%
filter(super_strength==T) %>%
filter(stamina==T)
#superhero_powers <- clean_names(superhero_powers)
#dim(filter(superhero_powers, agility=="TRUE", stealth=="TRUE",super_strength=="TRUE",stamina=="TRUE"))
#This method works without pipes
#unique_superheros <- superhero_powers %>%
#filter(agility=="TRUE", stealth=="TRUE",super_strength=="TRUE",stamina=="TRUE")
#^shows "TRUE" if superhero has all of these
#select(hero_names, agility, stealth, super_strength, stamina)
#unique_superheros
#dim(unique_superheros)
#Another way to solve the problem!
groot_powers <- superhero_powers %>%
filter(hero_names=="Groot") %>%
select_if(.==TRUE)
groot_powers
names(groot_powers)
#filter(superhero_powers, hero_names=="Groot")
#This is a way to do it without pipes
superhero_info %>%
filter(name=="Groot")
#filter(superhero_info, name=="Groot")
#This is another way to do it without pipes
glimpse(superhero_powers)
superhero_powers %>%
select(agility, stealth, super_strength, stamina) %>%
filter(agility==T) %>%
filter(stealth==T) %>%
filter(super_strength==T) %>%
filter(stamina==T) %>% count()
groot_powers <- superhero_powers %>%
filter(hero_names=="Groot") %>%
select_if(.==TRUE)
groot_powers
names(groot_powers)
superhero_info %>%
filter(name=="Groot")
library("tidyverse")
library("janitor")
superhero_info <- read_csv("data/heroes_information.csv", na = c("", "-99", "-"))
superhero_powers <- read_csv("data/super_hero_powers.csv", na = c("", "-99", "-"))
superhero_info <- clean_names(superhero_info)
superhero_powers <- clean_names(superhero_powers)
tabyl(superhero_info, alignment)
superhero_info %>%
tabyl(publisher)
#tabyl(superhero_info,publisher) another method
superhero_info %>%
select(name, alignment) %>%  #Shows the name and alignment columns
filter(alignment=="neutral") #Only gives the "neutral" alignment
superhero_info %>%
select(name, alignment, race) %>% #shows the columns for name, alignment, and race
arrange(superhero_info) #isolates the variables
#select(superhero_info, name, alignment, race)
#This is another solution for getting the variables we are interested in without involving a pipe.
superhero_info %>%
filter(race != "Human")
#filter(superhero_info, race!="Human")
#This is another way to do the problem not involving a pipe. This looks within race column and returns the entire superhero_info table and all the "races" that are NOT human.
good_guys <- superhero_info %>%
filter(alignment=="good") #dataframe for good guys
bad_guys <- superhero_info %>%
filter(alignment=="bad") #dataframe for bad guys
#good_guys <- filter(superhero_info, alignment=="good")
#good_guys
#This method doesn't involve pipes
#bad_guys <- filter(superhero_info, alignment=="bad")
#bad_guys
#This method doesn't involve pipes
good_guys %>%
tabyl(race)
#tabyl(good_guys, race)
#this method doesn't involve pipes
good_guys %>%
filter(race=="Vampire")
#filter(good_guys, race=="Vampire")
#This method doesn't use pipes
bad_guys %>%
filter(race=="Human") %>%
filter(gender =="Male") %>%
filter(height > 200)
#filter(bad_guys, height>200, race=="Human", gender=="Male")
#This code doesn't involve pipes.
good_guys %>%
filter(hair_color == "Green")
#Good guys with green hair
bad_guys %>%
filter(hair_color == "Green")
#Bad guys with green hair
#dim(filter(bad_guys, hair_color=="Green"))
#dim(filter(good_guys, hair_color=="Green"))
superhero_info %>%
filter(weight<50) %>%
arrange(weight) #sorts the weight from lowest to highest
superhero_info %>% mutate(height_weight_ratio = height/weight) %>% select(name, height, weight, height_weight_ratio) %>% arrange(desc(height_weight_ratio))
glimpse(superhero_powers)
superhero_powers %>%
select(agility, stealth, super_strength, stamina) %>%
filter(agility==T) %>%
filter(stealth==T) %>%
filter(super_strength==T) %>%
filter(stamina==T) %>% count()
#superhero_powers <- clean_names(superhero_powers)
#dim(filter(superhero_powers, agility=="TRUE", stealth=="TRUE",super_strength=="TRUE",stamina=="TRUE"))
#This method works without pipes
#unique_superheros <- superhero_powers %>%
#filter(agility=="TRUE", stealth=="TRUE",super_strength=="TRUE",stamina=="TRUE")
#^shows "TRUE" if superhero has all of these
#select(hero_names, agility, stealth, super_strength, stamina)
#unique_superheros
#dim(unique_superheros)
#Another way to solve the problem!
groot_powers <- superhero_powers %>%
filter(hero_names=="Groot") %>%
select_if(.==TRUE)
groot_powers
names(groot_powers)
#filter(superhero_powers, hero_names=="Groot")
#This is a way to do it without pipes
superhero_info %>%
filter(name=="Groot")
#filter(superhero_info, name=="Groot")
#This is another way to do it without pipes
superhero_info %>%
mutate(height_weight_ratio = height/weight) %>%
select(name, height, weight, height_weight_ratio) %>%
arrange(desc(height_weight_ratio))
names(msleep)
library("tidyverse")
library("janitor")
#install.packages("skimr")
library("skimr")
#Today we have learned a new package called skimr; once installed put the package in.
?msleep #gives information about the dataset tells the format and the variable names and what they mean
names(msleep)
library("palmerpenguins")
names(msleep)
msleep <- msleep #show the dataset in the environment panel.
msleep24 <- msleep %>%  #add msleep24 to beginning
mutate(sleep_total_24 = sleep_total/24) %>% #mutate makes a new column. new variable is sleep_total_24. then put the expression.
select(name, vore, sleep_total_24) %>% #Can put sleep_total in here to check if half
filter(sleep_total_24<=0.3) %>%
arrange(desc(sleep_total_24))
summary(msleep24) #look at sleep total min and max values to check.
skim(msleep24) #no missing data, perfectly complete, mean, quartiles, histogram
#This is a way to check to make sure the output is what it is. like a tool like summary() or glimpse()
hist(msleep24$sleep_total_24)
head(msleep)
large <- msleep %>%
select(name, genus, bodywt, sleep_total) %>%
filter(bodywt > 200) %>%
arrange(desc(bodywt))
large
msleep %>%
filter(bodywt>200) %>%
summarize(mean_sleep_lg = mean(sleep_total))
msleep %>%
filter(bodywt>200) %>%
summarize(mean_sleep_lg=mean(sleep_total), min_sleep_lg=min(sleep_total), max_sleep_lg=max(sleep_total), sd_sleep_lg=sd(sleep_total), total=n())
#This is needed for the Midterm
#total tells you the number of observations (rows)
msleep %>%
filter(order=="Primates") %>% #filter out all the primates
summarize(mean_bodywt_primates=mean(bodywt), min_bodywt_primates=min(bodywt), max_bodywt_primates=max(bodywt), total=n())
#Note: shortcut highlight command return
msleep %>%
filter(bodywt > 100)
msleep %>%
summarize(n_genera=n_distinct(genus)) #this is going to count the number of genera in msleep
#this is done above! This is another way that works
msleep %>%
tabyl(genus)
msleep %>%
summarize(n_min_sleep=min(sleep_total), n_max_sleep=max(sleep_total), n_mean_sleep=mean(sleep_total), total=n())
msleep %>%
group_by(order) %>%
summarize(mean_brain_wt = mean(brainwt), total=n())
msleep %>%
filter(order=="Carnivora") %>% #look into one obsevation we know
select(order, genus, brainwt) #maybe somone was afraid to measure panthers
msleep %>%
group_by(order) %>%
summarize(mean_brain_wt=mean(brainwt, na.rm=T))
#Cetacea is order= whatle
msleep %>%
filter(order=="Cetacea") %>%
select(order, genus, brainwt)
#No one has measured the brain weight of whales
library("tidyverse")
library("janitor")
library("skimr")
library("palmerpenguins")
glimpse(penguins)
levels(penguins$island) #This tells us there are three islands. island is a factor so use levels.
penguins %>%
group_by(island) %>%
summarize(mean_body_mass=mean(body_mass_g),
mean_bill_l=mean(bill_length_mm),
mean_bill_d=mean(bill_depth_mm),
mean_flip=mean(flipper_length_mm),
na.rm=TRUE)
penguins %>%
group_by(island) %>%
filter(!is.na(body_mass_g)) %>%
summarize(mean_body_mass=mean(body_mass_g),
n=n()) #n=n() gives you total count
#pull out all the observations that have a number and leave all the NAs behind.
penguins %>%
tabyl(island, species) #tabyl is apart of janitor
penguins %>%
group_by(species) %>%
summarize(mean_bill_length_mm=mean(bill_length_mm, na.rm = T))
penguins %>%
group_by(species) %>%
filter(!is.na(bill_length_mm)) %>%
summarize(mean_blm=mean(bill_length_mm))
penguins %>%
count(sex, island)
