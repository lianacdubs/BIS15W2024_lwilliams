global_sharks %>%
select(activity, sex) %>%
filter(activity=="Surfing") %>%
filter(sex!="NA" & sex!="lli") %>%
ggplot(aes(sex))+
geom_bar()+
labs(title="Shark Sex vs. Surfing Attacks",
x="Sex",
y="Number of Surfing Attacks")+
geom_text(aes(label = Number of Surfing Attacks), vjust = -0.2, size = 3, color = "black")
global_sharks %>%
select(activity, sex) %>%
filter(activity=="Surfing") %>%
filter(sex!="NA" & sex!="lli") %>%
ggplot(aes(sex))+
geom_bar()+
labs(title="Shark Sex vs. Surfing Attacks",
x="Sex",
y="Number of Surfing Attacks")+
geom_text(aes(label = activity), vjust = -0.2, size = 3, color = "black")
global_sharks %>%
select(activity, sex) %>%
filter(activity=="Surfing") %>%
filter(sex!="NA" & sex!="lli") %>%
ggplot(aes(sex))+
geom_bar()+
labs(title="Shark Sex vs. Surfing Attacks",
x="Sex",
y="Number of Surfing Attacks")
global_sharks_new %>%
ggplot(aes(x=injury, fill=injury))+
geom_bar(alpha=0.8, position = "dodge")+
facet_wrap(~activity)+
labs(title="Injury Type by Activity",
x=NULL,
y="Number of Incidents")+
theme(strip.text = element_text(size=10),
axis.text.x = element_text(size=8, angle = 60, hjust = 1))
global_sharks_new %>%
filter(activity!="NA") %>%
top_n(5, activity) %>%
ggplot(aes(x=common.name, y=log10.mass))+
geom_col()+
coord_flip()
global_sharks_new %>%
filter(activity!="NA") %>%
top_n(5, n) %>%
ggplot(aes(x=common.name, y=log10.mass))+
geom_col()+
coord_flip()
global_sharks %>%
filter(activity!="NA") %>%
top_n(5, n) %>%
ggplot(aes(x=common.name, y=log10.mass))+
geom_col()+
coord_flip()
library("tidyverse")
library("janitor")
library("naniar")
global_sharks <- read_csv("data/global-shark-attack.csv") %>% clean_names()
glimpse(global_sharks)
global_sharks %>%
naniar::miss_var_summary()
global_sharks %>%
count(country) %>%
arrange(desc(n))
global_sharks %>%
count(country) %>%
top_n(10, n) %>%
ggplot(aes(x=reorder(country,n), y=n))+
geom_col(fill = "violetred", alpha=0.8)+
coord_flip()+
labs(title="Shark Incidents by Country (1950-2022)",
x=NULL,
y="n") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
plot.title = element_text(size = 14, face="bold"))+
geom_text(aes(label = n), vjust = -0.2, size = 3, color = "black")
global_sharks_new <- global_sharks %>%
separate(date, into=c("year", "month", "day"), sep="-")
global_sharks_new %>%
group_by(month) %>%
summarise(total=n(), .groups='keep') %>%
ggplot(aes(x=as_factor(month), y=total))+
geom_col(fill = "#0099f9", alpha=0.8)+
labs(title="Shark Incidents by Month",
x="Month",
y="n")+
theme(plot.title = element_text(size = 14, face="bold"))
global_sharks_new %>%
count(activity) %>%
arrange(desc(n))
global_sharks %>%
filter(activity!="NA") %>%
top_n(5, n) %>%
ggplot(aes(x=common.name, y=log10.mass))+
geom_col()+
coord_flip()
global_sharks %>%
filter(activity!="NA") %>%
top_n(5, n) %>%
ggplot(aes(x=common.name, y=original_order))+
geom_col()+
coord_flip()
global_sharks %>%
filter(activity!="NA") %>%
top_n(5, original_order) %>%
ggplot(aes(x=activity, y=original_order))+
geom_col()+
coord_flip()
global_sharks %>%
filter(activity!="NA") %>%
group_by(activity) %>%
summarise(incident_count = n()) %>%
top_n(5, incident_count) %>%
ggplot(aes(x=reorder(activity, incident_count),  y=incident_count))+
geom_col()+
coord_flip() +
labs(x = "Activity", y = "Number of Incidents", title = "Top 5 Riskiest Activities")
global_sharks_new %>%
count(activity) %>%
arrange(desc(n))
global_sharks %>%
filter(sex %in% c("M", "F")) %>%
group_by(sex) %>%
summarise(fatalities = sum(fatal_y_n == "Y", na.rm = T)) %>%
ggplot(aes(x=sex, y=fatalities, fill=sex))+
geom_boxplot(alpha=0.8)+
labs(title="Fatalities from Sharks by Sex",
x="Sex",
y="Fatality")
global_sharks %>%
filter(sex %in% c("M", "F")) %>%
group_by(sex) %>%
summarise(fatalities = sum(fatal_y_n == "Y", na.rm = T)) %>%
ggplot(aes(x=sex, y=fatalities, fill=sex))+
geom_col(alpha=0.8)+
labs(title="Fatalities from Sharks by Sex",
x="Sex",
y="Fatality")
#Get counts of shark attacks by sex
sex_count <- table(global_sharks$sex)
library("tidyverse")
library("janitor")
library("naniar")
global_sharks <- read_csv("data/global-shark-attack.csv") %>% clean_names()
glimpse(global_sharks)
library("tidyverse")
library("janitor")
library("naniar")
global_sharks <- read_csv("data/global-shark-attack.csv") %>% clean_names()
glimpse(global_sharks)
global_sharks %>%
naniar::miss_var_summary()
global_sharks %>%
count(country) %>%
arrange(desc(n))
global_sharks %>%
count(country) %>%
top_n(10, n) %>%
ggplot(aes(x=reorder(country,n), y=n))+
geom_col(fill = "violetred", alpha=0.8)+
coord_flip()+
labs(title="Shark Incidents by Country (1950-2022)",
x=NULL,
y="n") +
theme(axis.text.x = element_text(angle = 60, hjust = 1),
plot.title = element_text(size = 14, face="bold"))+
geom_text(aes(label = n), vjust = -0.2, size = 3, color = "black")
global_sharks_new <- global_sharks %>%
separate(date, into=c("year", "month", "day"), sep="-")
global_sharks_new %>%
group_by(month) %>%
summarise(total=n(), .groups='keep') %>%
ggplot(aes(x=as_factor(month), y=total))+
geom_col(fill = "#0099f9", alpha=0.8)+
labs(title="Shark Incidents by Month",
x="Month",
y="n")+
theme(plot.title = element_text(size = 14, face="bold"))
global_sharks_new %>%
count(activity) %>%
arrange(desc(n))
global_sharks %>%
filter(activity!="NA") %>%
group_by(activity) %>%
summarise(incident_count = n()) %>%
top_n(5, incident_count) %>%
ggplot(aes(x=reorder(activity, incident_count),  y=incident_count))+
geom_col()+
coord_flip() +
labs(x = "Activity", y = "Number of Incidents", title = "Top 5 Riskiest Activities")
global_sharks %>%
filter(sex %in% c("M", "F")) %>%
group_by(sex) %>%
summarise(fatalities = sum(fatal_y_n == "Y", na.rm = T)) %>%
ggplot(aes(x=sex, y=fatalities, fill=sex))+
geom_col(alpha=0.8)+
labs(title="Fatalities from Sharks by Sex",
x="Sex",
y="Fatality")
global_sharks_new %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, y=activity, fill=sex))+
geom_boxplot(alpha=0.8)+
labs(title="Age of Attacked Individuals",
x="Attacks",
y="Age")
global_sharks_new %>%
ggplot(aes(x=injury, fill=injury))+
geom_bar(alpha=0.8, position = "dodge")+
facet_wrap(~activity)+
labs(title="Injury Type by Activity",
x=NULL,
y="Number of Incidents")+
theme(strip.text = element_text(size=10),
axis.text.x = element_text(size=8, angle = 60, hjust = 1))
global_sharks %>%
select(activity, sex) %>%
filter(activity=="Surfing") %>%
filter(sex!="NA" & sex!="lli") %>%
ggplot(aes(sex))+
geom_bar()+
labs(title="Shark Sex vs. Surfing Attacks",
x="Sex",
y="Number of Surfing Attacks")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
runApp("plot_iris.R")
names(penguins)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm")
)
server <- function(input, output) {
}
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px") #Providing the size/aspect of the visual
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = penguins, aes_string(x=input$x, y=input$y, color="species"))+ #input from the UI above
geom_point()+
theme_light(base_size = 18)
}) #this closes rendered function
} #this closes server function
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
names(homerange)
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar()
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position = "dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position = "dodge")
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x=input$x, y=input$y, color=""))+
geom_point()+
theme_light(base_size = 18)
}) #this closes rendered function
} #this closes server function
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position = "dodge", alpha=0.8, color="darkgreen")+
labs(x=NULL, fill="Fill Variable")+
theme_light(base_size = 18)
}) #this closes rendered function
} #this closes server function
shinyApp(ui, server)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px")
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data = homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position = "dodge", alpha=0.8, color="darkgreen")+
labs(x=NULL, fill="Fill Variable")+
theme_light(base_size = 18)
}) #this closes rendered function
} #this closes server function
shinyApp(ui, server)
install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
ui <- fluidPage(
selectInput("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot", width="500px", height="400px") #prof didn't include size
)
source("~/Desktop/BIS15W2024_lwilliams/apppractice.R")
runApp('~/Desktop/BIS15W2024_lwilliams/apppractice.R')
source("~/Desktop/BIS15W2024_lwilliams/apppractice.R")
runApp('~/Desktop/BIS15W2024_lwilliams/apppractice.R')
runApp('~/Desktop/BIS15W2024_lwilliams/apppractice.R')
setwd("~/Desktop/BIS15W2024_lwilliams")
runApp('apppractice.R')
setwd("/Users/lianacw1/Desktop/BIS15W2024_lwilliams/lab14")
runApp('~/Desktop/BIS15W2024_lwilliams/apppractice.R')
source("~/Desktop/BIS15W2024_lwilliams/apppractice.R")
runApp('~/Desktop/BIS15W2024_lwilliams/apppractice.R')
setwd("~/Desktop/BIS15W2024_lwilliams")
runApp('apppractice.R')
shinyApp(ui, server)
homerange <- readr::read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
homerange %>%
filter(taxon=="mammals") %>%
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.6)
ui <- fluidPage(titlePanel("Homerange Locomotion"),
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"), selected="trophic.guild"),
plotOutput("plot", width="600px", height="500px")
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(homerange, aes_string(x="locomotion", fill=input$x)) +
geom_bar(position="dodge", alpha=0.8, color="black") +
theme_light(base_size=18) +
labs(x=NULL, y=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 homerange by taxon"), #Add a title to the app
selectInput("x", "Select Taxon", #select input is referring to dropdown menu
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width = "600px", height = "500px"),  #specify dimensions
) #end of UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>% #the reactive part is the filter
ggplot(aes(x=log10.hra))+
geom_density(fill="steelblue", color="black", alpha=0.8) #No reactive function assigned to X or Y so thats why its aes vs. aes_string
})
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(titlePanel("Log 10 homerange by taxon"), #Add a title to the app
selectInput("x", "Select Taxon", #select input is referring to dropdown menu
choices = c("birds", "lake fishes", "lizards", "mammals", "marine fishes", "river fishes", "snakes", "tortoises", "turtles"), selected="birds"),
plotOutput("plot", width = "600px", height = "500px"),  #specify dimensions
) #end of UI
server <- function(input, output, session) {
output$plot <- renderPlot({
homerange %>%
filter(taxon==input$x) %>% #the reactive part is the filter
ggplot(aes(x=log10.hra))+
geom_density(fill="green", color="black", alpha=0.8) #No reactive function assigned to X or Y so thats why its aes vs. aes_string
})
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
ui <- dashboardPage(
dashboardHeader(title = "Sec Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
), #closes first box
box(width = 7,
plotOutput("plot", width = "600px", height = "400px")
) #closes the second box
) #closes the row
) #closes the dashboard body
) #closes the ui
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Sec Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
), #closes first box
box(width = 7,
plotOutput("plot", width = "600px", height = "400px")
) #closes the second box
) #closes the row
) #closes the dashboard body
) #closes the ui
server <- function(input, output, session) { }
session$onSessionEnded(stopApp) #automatically stop the app when we close it
ui <- dashboardPage(
dashboardHeader(title = "Sec Composition by Wolf Population"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width = 3,
selectInput("x", "Select Population", choices = unique(wolves$pop)), hr()
), #closes first box
box(width = 7,
plotOutput("plot", width = "600px", height = "400px")
) #closes the second box
) #closes the row
) #closes the dashboard body
) #closes the ui
server <- function(input, output, session) {
session$onSessionEnded(stopApp) #automatically stop the app when we close it
output$plot <- renderPlot({
wolves %>%
filter(sex!="NA") %>%
filter(pop==input$x) %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()
})
}
shinyApp(ui, server)
install.packages("shinythemes")
library(shinythemes)
ui <- fluidPage(
shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
#theme = shinytheme("cerulean"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
ui <- fluidPage(
#shinythemes::themeSelector(),  # <--- Add this somewhere in the UI
theme = shinytheme("yeti"),
titlePanel("Log 10 Homerange by Taxon"), # give the page a title
# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# this stops the app upon closing
session$onSessionEnded(stopApp)
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="steelblue", alpha=0.6)
})
}
shinyApp(ui, server)
